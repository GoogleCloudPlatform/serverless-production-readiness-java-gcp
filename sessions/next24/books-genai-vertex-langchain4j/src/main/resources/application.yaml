#
#  Copyright 2024 Google LLC
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# /
management:
  endpoint:
    health:
      show-details: ALWAYS
  health:
    diskspace:
      enabled: false
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
spring:
  main:
    lazy-initialization: true
  datasource:
    url: ${DB_URL}
    username: ${MY_USER}
    password: ${MY_PASSWORD}
  cloud:
    config:
      modelAnalysisName: ${MODEL_ANALYSIS_NAME:gemini-1.5-flash-001}
      modelImageProName: ${MODEL_IMAGE_PRO_NAME:gemini-1.5-flash-001}
  ai:
    vertex:
      ai:
        gemini:
          project-id: ${VERTEX_AI_GEMINI_PROJECT_ID}
          location: ${VERTEX_AI_GEMINI_LOCATION}
          chat:
            options:
              model: ${MODEL:gemini-1.5-flash-001}
  threads:
    virtual:
      enabled: true

prompts:
  bookanalysis: ${PROMPT_BOOK_ANALYSIS:Extract the main ideas from the book The Jungle Book by Rudyard Kipling}
  promptImage: ${PROMPT_IMAGE:Extract the title and author from the image, strictly in JSON format}
  promptTransformTF: >
    You are an expert in Google Cloud Platform (GCP), fluent in `gcloud` commands, 
    and deeply familiar with Terraform modules for GCP. Your task is to translate shell 
    scripts that utilize `gcloud` commands into equivalent, well-structured Terraform code, 
    adhering to Terraform best practices for file organization and maintainability.

    Please carefully analyze the provided bash script enclosed within triple backquotes ```%s``` 

    Your output should include:

    1. **Terraform Code in Separate Files:**
       * **main.tf:** A fully functional Terraform configuration file containing the core 
         infrastructure resource definitions that replicate the functionality of the bash script.
       * **variables.tf:** This file should contain all input variable declarations used in 
         the `main.tf` file.
       * **Additional Files (If Applicable):**  Suggest and create additional Terraform files 
         as needed (e.g., `outputs.tf`, `provider.tf`, `data.tf`) based on the complexity and 
         requirements of the converted script.

    2. **Explanation:** A clear breakdown of the Terraform resources, variables, and modules 
       used, along with explanations for how they achieve the same results as the original script.
       Indicate which file each element belongs to.

    3. **Best Practices:** Where applicable, offer suggestions for adhering to Terraform best 
       practices beyond file organization (e.g., resource naming, input validation, module usage).

    4. **Potential Optimizations:** If there are opportunities to make the Terraform code more 
       efficient, concise, or maintainable, please highlight them.

    **Important Considerations:**

    * **Environment Variables:** If the bash script relies on environment variables, ensure the 
       Terraform code handles them appropriately (e.g., using input variables in `variables.tf`).
    * **Error Handling:** Terraform provides error handling mechanisms that may be missing in the 
       bash script. Incorporate these to improve the robustness of the code.
    * **State Management:** Briefly explain how Terraform state would be managed for this particular 
       configuration.
    * **Example Usage:** Demonstrates how to apply Terraform script.
