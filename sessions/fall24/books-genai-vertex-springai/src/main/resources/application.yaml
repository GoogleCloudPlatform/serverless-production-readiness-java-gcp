#
#  Copyright 2024 Google LLC
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# /
management:
  endpoint:
    health:
      show-details: ALWAYS
  health:
    diskspace:
      enabled: false
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
spring:
  main:
    lazy-initialization: true
  datasource:
    url: ${DB_URL}
    username: ${MY_USER}
    password: ${MY_PASSWORD}
  cloud:
    config:
      modelAnalysisName: ${MODEL_ANALYSIS_NAME:gemini-pro}
      modelImageProName: ${MODEL_IMAGE_PRO_NAME:gemini-pro-vision}
  ai:
    vertex:
      ai:
        gemini:
          project-id: ${VERTEX_AI_GEMINI_PROJECT_ID}
          location: ${VERTEX_AI_GEMINI_LOCATION}
          chat:
            options:
              model: ${MODEL:gemini-1.5-flash-001}
  threads:
    virtual:
      enabled: true
workflows:
  summary:
    chunk:
      characters: ${SUMMARY_CHUNK:55000}
prompts:
  bookanalysis: ${PROMPT_BOOK_ANALYSIS:Extract the main ideas from the book The Jungle Book by Rudyard Kipling}
  promptImage: ${PROMPT_IMAGE:Extract the title and author from the image, strictly in JSON format}
  promptSubSummary: ${PROMPT_SUBSUMMARY:Taking the following context delimited by triple backquotes into consideration ```%s``` Write a concise summary of the following text delimited by triple backquotes. ```%s``` CONCISE SUB-SUMMARY:}
  promptSummary: ${PROMPT_SUMMARY:Please give me a summary with an introduction, three one sentence bullet points, and a conclusion from the following text delimited by triple backquotes. ```Text:%s``` SUMMARY (Don't mention Project Gutenberg in summary):}
  promptTransformTF: >
    You are an expert in Google Cloud Platform (GCP), fluent in `gcloud` commands, 
    and deeply familiar with Terraform modules for GCP. Your task is to translate shell 
    scripts that utilize `gcloud` commands into equivalent, well-structured Terraform code, 
    adhering to Terraform best practices for file organization and maintainability.
    
    Please carefully analyze the provided bash script enclosed within triple back quotes ```%s``` 
  
    Your output should include:
  
    1. **Terraform Code in Separate Files:**
       * **main.tf:** A fully functional Terraform configuration file containing the core 
         infrastructure resource definitions that replicate the functionality of the bash script.
       * **variables.tf:** This file should contain all input variable declarations used in 
         the `main.tf` file.
       * **Additional Files (If Applicable):**  Suggest and create additional Terraform files 
         as needed (e.g., `outputs.tf`, `provider.tf`, `data.tf`) based on the complexity and 
         requirements of the converted script.
  
    2. **Explanation:** A clear breakdown of the Terraform resources, variables, and modules 
       used, along with explanations for how they achieve the same results as the original script.
       Indicate which file each element belongs to.
  
    3. **Best Practices:** Where applicable, offer suggestions for adhering to Terraform best 
       practices beyond file organization (e.g., resource naming, input validation, module usage).
  
    4. **Potential Optimizations:** If there are opportunities to make the Terraform code more 
       efficient, concise, or maintainable, please highlight them.
  
    **Important Considerations:**
  
    * **Environment Variables:** If the bash script relies on environment variables, ensure the 
       Terraform code handles them appropriately (e.g., using input variables in `variables.tf`).
    * **Error Handling:** Terraform provides error handling mechanisms that may be missing in the 
       bash script. Incorporate these to improve the robustness of the code.
    * **State Management:** Briefly explain how Terraform state would be managed for this particular 
       configuration.
    * **Example Usage:** Demonstrates how to apply Terraform script.
    * **Reference Documentation:** Output should also consider the following document enclosed within triple back quotes for best practice:
    ```%s```

# Prompt Explanation
# Creating an effective prompt for the Gemini 1.5 Flash LLM is crucial to ensure accurate and efficient transformation of bash scripts into Terraform configurations. Our prompt 
# is designed to leverage the model's expertise in GCP and Terraform, analyze the provided script, and generate high-quality Terraform code while adhering to best practices and 
# optimizing for maintainability. The Reference Documentation used to generate optimal output will be retrieved using a semantic search using embeddings generated by 
# textembedding-gecko in Vertexai.
#     Your output should include:
#     1. **Terraform Code in Separate Files:**
#        * **main.tf:** A fully functional Terraform configuration file containing the core 
#          infrastructure resource definitions that replicate the functionality of the bash script.
#        * **variables.tf:** This file should contain all input variable declarations used in 
#          the `main.tf` file.
#        * **Additional Files (If Applicable):**  Suggest and create additional Terraform files 
#          as needed (e.g., `outputs.tf`, `provider.tf`, `data.tf`) based on the complexity and 
#          requirements of the converted script.
  
#     2. **Explanation:** A clear breakdown of the Terraform resources, variables, and modules 
#        used, along with explanations for how they achieve the same results as the original script.
#        Indicate which file each element belongs to.
  
#     3. **Best Practices:** Where applicable, offer suggestions for adhering to Terraform best 
#        practices beyond file organization (e.g., resource naming, input validation, module usage).
  
#     4. **Potential Optimizations:** If there are opportunities to make the Terraform code more 
#        efficient, concise, or maintainable, please highlight them.
  
#     **Important Considerations:**
  
#     * **Environment Variables:** If the bash script relies on environment variables, ensure the 
#        Terraform code handles them appropriately (e.g., using input variables in `variables.tf`).
#     * **Error Handling:** Terraform provides error handling mechanisms that may be missing in the 
#        bash script. Incorporate these to improve the robustness of the code.
#     * **State Management:** Briefly explain how Terraform state would be managed for this particular 
#        configuration.
#     * **Example Usage:** Demonstrates how to apply Terraform script.
#     * **Reference Documentation:** Output should also consider the following document enclosed within triple back quotes for best practice:
# The prompt can be broken down in 4 parts:
# Expertise and Script Analysis: Model translates bash scripts to Terraform as a GCP expert.
# Output Requirements: Generate main.tf, variables.tf, and other necessary Terraform files.
# Explanations and Best Practices: Explain Terraform resources and suggest best practices.
# Optimizations and Considerations: Highlight optimizations and handle environment variables, error handling, and state management. Here is where we retrieve the relevant reference documentation ingested in the ingestion flow. (*In this case reference to terraform best practice)
# By following this detailed prompt, we ensure that the Gemini 1.5 Flash LLM generates Terraform code that is not only functionally equivalent to the original bash script but also adheres to best practices, is optimized for maintainability, and is robust in handling various operational scenarios.
